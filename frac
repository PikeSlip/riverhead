pragma solidity ^0.8.0;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/SafeERC721.sol";

contract FractionalizedERC721 is SafeERC721 {
    mapping(address => mapping(uint256 => uint256)) private _fractionalOwnership;
    mapping(uint256 => address) private _tokenOwners;
    mapping(uint256 => uint256) private _tokenFractions;

    constructor() public {
        _tokenFractions[0] = 100;
    }

    function assign(address _to, uint256 _tokenId, uint256 _fraction) public {
        require(_fraction > 0 && _fraction <= _tokenFractions[_tokenId], "Invalid fraction");
        _fractionalOwnership[_to][_tokenId] = _fraction;
        _tokenOwners[_tokenId] = _to;
    }

    function transfer(address _to, uint256 _tokenId) public {
        require(_fractionalOwnership[msg.sender][_tokenId] == _tokenFractions[_tokenId], "Sender must own the entire token to transfer");
        _fractionalOwnership[msg.sender][_tokenId] = 0;
        _fractionalOwnership[_to][_tokenId] = _tokenFractions[_tokenId];
        _tokenOwners[_tokenId] = _to;
        emit Transfer(msg.sender, _to, _tokenId);
    }

    function balanceOf(address _owner) public view returns (uint256) {
        return _fractionalOwnership[_owner].length;
    }

    function ownerOf(uint256 _tokenId) public view returns (address) {
        return _tokenOwners[_tokenId];
    }

    function fractionOf(address _owner, uint256 _tokenId) public view returns (uint256) {
        return _fractionalOwnership[_owner][_tokenId];
    }

    function totalSupply() public view returns (uint256) {
        return _tokenFractions.length;
    }

    function approve(address _to, uint256 _tokenId) public {
        require(_fractionalOwnership[msg.sender][_tokenId] > 0, "Sender must own a portion of the token to approve");
        super._approve(_to, _tokenId);
    }

    function getApproved(uint256 _tokenId) public view returns (address) {
        return super._getApproved(_tokenId);
    }

    function setApprovalForAll(address _to, bool _approved) public {
        require(_fractionalOwnership[msg.sender].length > 0, "Sender must own a portion of at least one token to set approval for all");
        super._setApprovalForAll(msg.sender, _to, _approved);
    }

    function isApprovedForAll(address _owner, address _operator) public view returns (bool) {
        return super._isApprovedForAll(_owner, _operator);
    }
}
